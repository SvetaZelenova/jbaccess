/**
 * Jointbox access API
 * This is a API for access management for jointbox project
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dmitriy.selischev@logicify.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AllRoleAclsResponse } from '../model/allRoleAclsResponse';
import { AllRolesResponse } from '../model/allRolesResponse';
import { EmptyOkResponse } from '../model/emptyOkResponse';
import { RoleAclResponse } from '../model/roleAclResponse';
import { RoleInDto } from '../model/roleInDto';
import { RoleResponse } from '../model/roleResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RolesService {

    protected basePath = 'http://jbaccess-server.herokuapp.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * add allow rule to place for role
     * 
     * @param roleId 
     * @param placeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public allowPlaceForRole(roleId: number, placeId: number, observe?: 'body', reportProgress?: boolean): Observable<RoleAclResponse>;
    public allowPlaceForRole(roleId: number, placeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleAclResponse>>;
    public allowPlaceForRole(roleId: number, placeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleAclResponse>>;
    public allowPlaceForRole(roleId: number, placeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (roleId === null || roleId === undefined) {
            throw new Error('Required parameter roleId was null or undefined when calling allowPlaceForRole.');
        }

        if (placeId === null || placeId === undefined) {
            throw new Error('Required parameter placeId was null or undefined when calling allowPlaceForRole.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<RoleAclResponse>(`${this.basePath}/role/${encodeURIComponent(String(roleId))}/allow/${encodeURIComponent(String(placeId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * attach role to person
     * 
     * @param personId 
     * @param roleId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public attachRoleToPerson(personId: number, roleId: number, observe?: 'body', reportProgress?: boolean): Observable<EmptyOkResponse>;
    public attachRoleToPerson(personId: number, roleId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmptyOkResponse>>;
    public attachRoleToPerson(personId: number, roleId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmptyOkResponse>>;
    public attachRoleToPerson(personId: number, roleId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling attachRoleToPerson.');
        }

        if (roleId === null || roleId === undefined) {
            throw new Error('Required parameter roleId was null or undefined when calling attachRoleToPerson.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<EmptyOkResponse>(`${this.basePath}/person/${encodeURIComponent(String(personId))}/roles/${encodeURIComponent(String(roleId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * create new role
     * 
     * @param role 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createRole(role?: RoleInDto, observe?: 'body', reportProgress?: boolean): Observable<RoleResponse>;
    public createRole(role?: RoleInDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponse>>;
    public createRole(role?: RoleInDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponse>>;
    public createRole(role?: RoleInDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<RoleResponse>(`${this.basePath}/roles`,
            role,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * delete role by id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRole(id: number, observe?: 'body', reportProgress?: boolean): Observable<EmptyOkResponse>;
    public deleteRole(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmptyOkResponse>>;
    public deleteRole(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmptyOkResponse>>;
    public deleteRole(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteRole.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<EmptyOkResponse>(`${this.basePath}/roles/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * add deny rule to place for role
     * 
     * @param roleId 
     * @param placeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public denyPlaceForRole(roleId: number, placeId: number, observe?: 'body', reportProgress?: boolean): Observable<RoleAclResponse>;
    public denyPlaceForRole(roleId: number, placeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleAclResponse>>;
    public denyPlaceForRole(roleId: number, placeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleAclResponse>>;
    public denyPlaceForRole(roleId: number, placeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (roleId === null || roleId === undefined) {
            throw new Error('Required parameter roleId was null or undefined when calling denyPlaceForRole.');
        }

        if (placeId === null || placeId === undefined) {
            throw new Error('Required parameter placeId was null or undefined when calling denyPlaceForRole.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<RoleAclResponse>(`${this.basePath}/role/${encodeURIComponent(String(roleId))}/deny/${encodeURIComponent(String(placeId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * detach role from person
     * 
     * @param personId 
     * @param roleId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public detachRoleFromPerson(personId: number, roleId: number, observe?: 'body', reportProgress?: boolean): Observable<EmptyOkResponse>;
    public detachRoleFromPerson(personId: number, roleId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmptyOkResponse>>;
    public detachRoleFromPerson(personId: number, roleId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmptyOkResponse>>;
    public detachRoleFromPerson(personId: number, roleId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling detachRoleFromPerson.');
        }

        if (roleId === null || roleId === undefined) {
            throw new Error('Required parameter roleId was null or undefined when calling detachRoleFromPerson.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<EmptyOkResponse>(`${this.basePath}/person/${encodeURIComponent(String(personId))}/roles/${encodeURIComponent(String(roleId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get all roles
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllRoles(observe?: 'body', reportProgress?: boolean): Observable<AllRolesResponse>;
    public getAllRoles(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AllRolesResponse>>;
    public getAllRoles(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AllRolesResponse>>;
    public getAllRoles(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AllRolesResponse>(`${this.basePath}/roles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get ACLs by role
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRoleACLs(id: number, observe?: 'body', reportProgress?: boolean): Observable<AllRoleAclsResponse>;
    public getRoleACLs(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AllRoleAclsResponse>>;
    public getRoleACLs(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AllRoleAclsResponse>>;
    public getRoleACLs(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRoleACLs.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AllRoleAclsResponse>(`${this.basePath}/role/${encodeURIComponent(String(id))}/acls`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get role by id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRoles(id: number, observe?: 'body', reportProgress?: boolean): Observable<RoleResponse>;
    public getRoles(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponse>>;
    public getRoles(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponse>>;
    public getRoles(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRoles.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<RoleResponse>(`${this.basePath}/roles/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get roles attached to person
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRolesByPerson(id: number, observe?: 'body', reportProgress?: boolean): Observable<AllRolesResponse>;
    public getRolesByPerson(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AllRolesResponse>>;
    public getRolesByPerson(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AllRolesResponse>>;
    public getRolesByPerson(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRolesByPerson.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AllRolesResponse>(`${this.basePath}/person/${encodeURIComponent(String(id))}/roles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update role by id
     * 
     * @param id 
     * @param role 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRole(id: number, role?: RoleInDto, observe?: 'body', reportProgress?: boolean): Observable<RoleResponse>;
    public updateRole(id: number, role?: RoleInDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RoleResponse>>;
    public updateRole(id: number, role?: RoleInDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RoleResponse>>;
    public updateRole(id: number, role?: RoleInDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateRole.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<RoleResponse>(`${this.basePath}/roles/${encodeURIComponent(String(id))}`,
            role,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
