/**
 * Jointbox access API
 * This is a API for access management for jointbox project
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dmitriy.selischev@logicify.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AllDoorsResponse } from '../model/allDoorsResponse';
import { AllPlacesResponse } from '../model/allPlacesResponse';
import { DoorInDto } from '../model/doorInDto';
import { DoorResponse } from '../model/doorResponse';
import { EmptyOkResponse } from '../model/emptyOkResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DoorsService {

    protected basePath = 'http://jbaccess-server.herokuapp.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * attach door to a controller. Requires auth
     * 
     * @param controllerId 
     * @param doorId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public attachDoorToController(controllerId: number, doorId: number, observe?: 'body', reportProgress?: boolean): Observable<EmptyOkResponse>;
    public attachDoorToController(controllerId: number, doorId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmptyOkResponse>>;
    public attachDoorToController(controllerId: number, doorId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmptyOkResponse>>;
    public attachDoorToController(controllerId: number, doorId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (controllerId === null || controllerId === undefined) {
            throw new Error('Required parameter controllerId was null or undefined when calling attachDoorToController.');
        }

        if (doorId === null || doorId === undefined) {
            throw new Error('Required parameter doorId was null or undefined when calling attachDoorToController.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<EmptyOkResponse>(`${this.basePath}/controllers/${encodeURIComponent(String(controllerId))}/doors/${encodeURIComponent(String(doorId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * attach door to place
     * 
     * @param placeId 
     * @param doorId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public attachDoorToPlace(placeId: number, doorId: number, observe?: 'body', reportProgress?: boolean): Observable<EmptyOkResponse>;
    public attachDoorToPlace(placeId: number, doorId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmptyOkResponse>>;
    public attachDoorToPlace(placeId: number, doorId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmptyOkResponse>>;
    public attachDoorToPlace(placeId: number, doorId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (placeId === null || placeId === undefined) {
            throw new Error('Required parameter placeId was null or undefined when calling attachDoorToPlace.');
        }

        if (doorId === null || doorId === undefined) {
            throw new Error('Required parameter doorId was null or undefined when calling attachDoorToPlace.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<EmptyOkResponse>(`${this.basePath}/places/${encodeURIComponent(String(placeId))}/doors/${encodeURIComponent(String(doorId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * create new door. Requires auth
     * 
     * @param door 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createDoor(door?: DoorInDto, observe?: 'body', reportProgress?: boolean): Observable<DoorResponse>;
    public createDoor(door?: DoorInDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DoorResponse>>;
    public createDoor(door?: DoorInDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DoorResponse>>;
    public createDoor(door?: DoorInDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<DoorResponse>(`${this.basePath}/doors`,
            door,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get door by id. Requires auth
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDoor(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteDoor(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteDoor(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteDoor(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteDoor.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/doors/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * detach door from a controller. Requires auth
     * 
     * @param controllerId 
     * @param doorId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public detachDoorFromController(controllerId: number, doorId: number, observe?: 'body', reportProgress?: boolean): Observable<EmptyOkResponse>;
    public detachDoorFromController(controllerId: number, doorId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmptyOkResponse>>;
    public detachDoorFromController(controllerId: number, doorId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmptyOkResponse>>;
    public detachDoorFromController(controllerId: number, doorId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (controllerId === null || controllerId === undefined) {
            throw new Error('Required parameter controllerId was null or undefined when calling detachDoorFromController.');
        }

        if (doorId === null || doorId === undefined) {
            throw new Error('Required parameter doorId was null or undefined when calling detachDoorFromController.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<EmptyOkResponse>(`${this.basePath}/controllers/${encodeURIComponent(String(controllerId))}/doors/${encodeURIComponent(String(doorId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * detach door from place
     * 
     * @param placeId 
     * @param doorId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public detachDoorFromPlace(placeId: number, doorId: number, observe?: 'body', reportProgress?: boolean): Observable<EmptyOkResponse>;
    public detachDoorFromPlace(placeId: number, doorId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmptyOkResponse>>;
    public detachDoorFromPlace(placeId: number, doorId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmptyOkResponse>>;
    public detachDoorFromPlace(placeId: number, doorId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (placeId === null || placeId === undefined) {
            throw new Error('Required parameter placeId was null or undefined when calling detachDoorFromPlace.');
        }

        if (doorId === null || doorId === undefined) {
            throw new Error('Required parameter doorId was null or undefined when calling detachDoorFromPlace.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<EmptyOkResponse>(`${this.basePath}/places/${encodeURIComponent(String(placeId))}/doors/${encodeURIComponent(String(doorId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get all doors
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllDoors(observe?: 'body', reportProgress?: boolean): Observable<AllDoorsResponse>;
    public getAllDoors(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AllDoorsResponse>>;
    public getAllDoors(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AllDoorsResponse>>;
    public getAllDoors(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AllDoorsResponse>(`${this.basePath}/doors`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get door by id
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDoor(id: number, observe?: 'body', reportProgress?: boolean): Observable<DoorResponse>;
    public getDoor(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DoorResponse>>;
    public getDoor(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DoorResponse>>;
    public getDoor(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDoor.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DoorResponse>(`${this.basePath}/doors/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get all doors attached to controller
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDoorsByController(id: number, observe?: 'body', reportProgress?: boolean): Observable<AllDoorsResponse>;
    public getDoorsByController(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AllDoorsResponse>>;
    public getDoorsByController(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AllDoorsResponse>>;
    public getDoorsByController(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDoorsByController.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AllDoorsResponse>(`${this.basePath}/controllers/${encodeURIComponent(String(id))}/doors`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get doors attached to place
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDoorsByPlace(id: number, observe?: 'body', reportProgress?: boolean): Observable<AllPlacesResponse>;
    public getDoorsByPlace(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AllPlacesResponse>>;
    public getDoorsByPlace(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AllPlacesResponse>>;
    public getDoorsByPlace(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDoorsByPlace.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AllPlacesResponse>(`${this.basePath}/places/${encodeURIComponent(String(id))}/doors`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update door by id. Requires auth
     * 
     * @param id 
     * @param door 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDoor(id: number, door?: DoorInDto, observe?: 'body', reportProgress?: boolean): Observable<DoorResponse>;
    public updateDoor(id: number, door?: DoorInDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DoorResponse>>;
    public updateDoor(id: number, door?: DoorInDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DoorResponse>>;
    public updateDoor(id: number, door?: DoorInDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateDoor.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<DoorResponse>(`${this.basePath}/doors/${encodeURIComponent(String(id))}`,
            door,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
